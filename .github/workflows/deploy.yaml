
name: Deployment

on:
  pull_request:
    branches:
      - "release/*"
      - "feature/*"
    types: [closed]

  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18.x

      - name: Install dependencies
        id: install
        run: yarn install

      - name: Generate schemas
        run: yarn run tsc:interface

      - name: Test code
        id: run-tests
        run: yarn run validate

      - name: Upload test report
        if: failure() && steps.run-tests.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test.json

  build-version:
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.version.outputs.new-version }}
      branch: ${{ steps.extract-number-branch.outputs.branch }}
      format-version: ${{ steps.extract-format-version.outputs.format-version }}
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Get current version
        run: |
          GET_VERSION=$(node -p -e "require('./package.json').version")
          echo "GET_VERSION=${GET_VERSION}" >> $GITHUB_ENV

      - name: Extract branch number
        id: extract-number-branch
        run: |
          BRANCH=${{ github.base_ref }}
          IFS='/' read -ra BRANCH_PARTS <<< "$BRANCH"
          echo "BRANCH=${BRANCH}" >> $GITHUB_ENV
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"
          echo "BRANCH_SOURCE=${BRANCH_PARTS[0]}" >> $GITHUB_ENV
          echo "BRANCH_NUMBER=${BRANCH_PARTS[1]}" >> $GITHUB_ENV

      - name: Validate version format
        id: extract-format-version
        run: |
          CURRENT_VERSION=$GET_VERSION
          if [ $CURRENT_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]; then
            TYPE_FORMAT_VERSION="latest"
          elif [ $CURRENT_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+\-[0-9]+\.[0-9]+$ ]; then
            TYPE_FORMAT_VERSION="release"
          elif [ $CURRENT_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+\-tik-[0-9]+-patch\.[0-9]+$ ]; then
            TYPE_FORMAT_VERSION="hotfix"
          elif [ $CURRENT_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+\-[0-9]+-alpha\.[0-9]+$ ]; then
            TYPE_FORMAT_VERSION="develop"
          fi
          echo "TYPE_FORMAT_VERSION=${TYPE_FORMAT_VERSION}" >> $GITHUB_ENV
          echo "format-version=${TYPE_FORMAT_VERSION}" >> $GITHUB_OUTPUT

      - name: Set Version Release
        if: ${{ steps.extract-number-branch.outputs.branch == 'release' }}
        run: |
          if [[ $TYPE_FORMAT_VERSION == "release" ]]; then
            IFS='-' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            IFS='.' read -ra VERSION_PARTS_SECOND <<< "${VERSION_PARTS[1]}"
            GET_BRANCH_NUMBER="${VERSION_PARTS_SECOND[0]}"
          
            if [[ $GET_BRANCH_NUMBER == $BRANCH_NUMBER ]]; then
              CURRENT_NUMBER="${VERSION_PARTS_SECOND[1]}"
              NEW_NUMBER=$((CURRENT_NUMBER + 1))
              NEW_VERSION="${VERSION_PARTS[0]}-${BRANCH_NUMBER}.${NEW_NUMBER}"
            else
              IFS='.' read -ra VERSION_PARTS_FIRST <<< "${VERSION_PARTS[0]}"
              MAJOR_VERSION="${VERSION_PARTS_FIRST[0]}"
              MINOR_VERSION="${VERSION_PARTS_FIRST[1]}"
              NEW_VERSION_MINOR=$((MINOR_VERSION + 1))
              BRANCH_NUMBER=$BRANCH_NUMBER
              NEW_VERSION="${MAJOR_VERSION}.${NEW_VERSION_MINOR}.0-${BRANCH_NUMBER}.1"
            fi
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
            echo "new-version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          else
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR_VERSION="${VERSION_PARTS[0]}"
            MINOR_VERSION="${VERSION_PARTS[1]}"
            NEW_VERSION_MINOR=$((MINOR_VERSION + 1))
            BRANCH_NUMBER=$BRANCH_NUMBER
            NEW_VERSION="${MAJOR_VERSION}.${NEW_VERSION_MINOR}.0-${BRANCH_NUMBER}.1"
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
            echo "new-version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          fi
        shell: bash

      - name: Log GITHUB_ENV
        run: |
          echo "GET_VERSION is $GET_VERSION"          
          echo "BRANCH_SOURCE is $BRANCH_SOURCE"
          echo "BRANCH_NUMBER is $BRANCH_NUMBER"
          echo "NEW_VERSION is $NEW_VERSION"          
          echo "IS_NEW_FORMAT is $IS_NEW_FORMAT"
          echo "TYPE_FORMAT_VERSION is $TYPE_FORMAT_VERSION"